public class TwoLinkBinTree1<E> {
    public static class TreeNode<E> {
        E data;
        TreeNode leftNode;
        TreeNode rightNode;

        public TreeNode() {
        }

        public TreeNode(E data) {
            this.data = data;
        }

        public TreeNode(E data, TreeNode leftNode, TreeNode rightNode) {
            this.data = data;
            this.leftNode = leftNode;
            this.rightNode = rightNode;
        }
    }

    TreeNode rootNode;

    // 以默认的构造器创建二叉树
    public TwoLinkBinTree1() {
        this.rootNode = new TreeNode();
    }

    // 以指定根元素创建二叉树
    public TwoLinkBinTree1(E data) {
        this.rootNode = new TreeNode(data);
    }

    /**
     * 为指定节点添加子节点
     *
     * @param parent 需要添加子节点的父节点的索引
     * @param data   新子节点的数据
     * @param isLeft 是否为左节点
     * @return 新增的节点
     */
    public TreeNode<E> addNode(TreeNode parent, E data, boolean isLeft) {
        // 如果指定节点为空，则抛出异常
        if (parent == null) {
            throw new RuntimeException(parent + "节点为null， 无法添加子节点");
        }
        // 将要添加指定节点的左节点不为空，抛出异常
        if (isLeft && parent.leftNode != null) {
            throw new RuntimeException(parent + "节点已有左子节点，无法添加左子节点");
        }
        // 将要添加指定节点的右节点不为空，抛出异常
        if (!isLeft && parent.rightNode != null) {
            throw new RuntimeException(parent + "节点已有右子节点，无法添加右子节点");
        }
        TreeNode<E> newNode = new TreeNode<E>(data);
        if (isLeft) {
            // 让父节点的leftNode引用指向新节点
            parent.leftNode = newNode;
        } else {
            // 让父节点的rightNode引用指向新节点
            parent.rightNode = newNode;
        }
        return newNode;
    }

    // 判断二叉树是否为空
    public boolean empty() {
        // 是否存在根节点判断二叉树是否为空
        return rootNode == null;
    }

    // 返回根节点
    public TreeNode<E> getRoot() {
        if (empty()) {
            throw new RuntimeException("树为空，无法访问根节点");
        }
        return rootNode;
    }

    // 返回指定节点（非根节点）的父节点
    public TreeNode<E> getParent(TreeNode<E> node) {
        // 对于二叉树链表存储法，如果要访问指定节点的父节点必须遍历二叉树
        return null;
    }

    // 返回指定节点（非叶子）的左子节点，当左子节点不存在时返回null
    public TreeNode<E> getLeftChild(TreeNode<E> parent) {
        if (parent == null) {
            throw new RuntimeException(parent + "节点为null，无法添加子节点");
        }
        return parent.leftNode == null ? null : parent.leftNode;
    }

    // 返回指定节点（非叶子）的右子节点，当右子节点不存在时返回null
    public TreeNode<E> getRightChild(TreeNode<E> parent) {
        if (parent == null) {
            throw new RuntimeException(parent + "节点为null，无法添加子节点");
        }
        return parent.rightNode == null ? null : parent.rightNode;
    }

    // 返回该二叉树的深度
    public int deep() {
        // 获取该树的深度
        return getDeep(rootNode);
    }

    // 这是一个递归方法：每一棵子树的深度为其所有子树的最大深度 + 1
    private int getDeep(TreeNode<E> node) {
        if (node == null) {
            return 0;
        }
        // 没有子树
        if (node.leftNode == null && node.rightNode == null) {
            return 1;
        } else {
            int leftDeep = getDeep(node.leftNode);
            int rightDeep = getDeep(node.rightNode);
            // 记录其所有左、右子树中较大的深度
            int max = leftDeep > rightDeep ? leftDeep : rightDeep;
            // 返回其左右子树中较大的深度 + 1
            return max + 1;
        }
    }

    public static void main(String[] args) {
        TwoLinkBinTree1<String> binTree1 = new TwoLinkBinTree1<>("根节点");
        TwoLinkBinTree1.TreeNode a = binTree1.getRoot();
        TwoLinkBinTree1.TreeNode b1 = binTree1.addNode(a, "b1", true);
        TwoLinkBinTree1.TreeNode b2 = binTree1.addNode(a, "b2", false);
        TwoLinkBinTree1.TreeNode c1 = binTree1.addNode(b1, "c1", true);
        TwoLinkBinTree1.TreeNode c2 = binTree1.addNode(b1, "c2", false);
        TwoLinkBinTree1.TreeNode c3 = binTree1.addNode(b2, "c3", true);
        TwoLinkBinTree1.TreeNode c4 = binTree1.addNode(b2, "c4", false);
        System.out.println("第三层第3个节点:" + a.rightNode.leftNode.data);
        System.out.println(binTree1.deep());
    }
}
