/**
 * 三叉链表存储方式是对二叉链表的一种改进，通过为树节点增加一个parent引用，可以让每个节点都能非常方便的访问其父节点，
 * 三叉链表存储的二叉树即可方便地向下访问节点，也可方便地向上访问节点。
 */
public class ThreeLinkBinTree1<E> {
    public static class TreeNode<E> {
        E data;
        TreeNode leftNode;
        TreeNode rightNode;
        TreeNode parentNode;

        public TreeNode() {
        }

        public TreeNode(E data) {
            this.data = data;
        }

        public TreeNode(E data, TreeNode leftNode, TreeNode rightNode, TreeNode parentNode) {
            this.data = data;
            this.leftNode = leftNode;
            this.rightNode = rightNode;
            this.parentNode = parentNode;
        }

        @Override
        public String toString() {
            return "这是" + data + "节点";
        }
    }

    private TreeNode rootNode;

    // 以默认的构造器创建二叉树
    public ThreeLinkBinTree1() {
        this.rootNode = new TreeNode();
    }

    // 以指定根元素创建二叉树
    public ThreeLinkBinTree1(E data) {
        this.rootNode = new TreeNode(data);
    }

    /**
     * 为指定节点添加子节点
     *
     * @param parent 需要添加子节点的父节点
     * @param data   新子节点的数据
     * @param isLeft 是否为左节点
     * @return 新增的节点
     */
    public TreeNode<E> addNode(TreeNode<E> parent, E data, boolean isLeft) {
        if (parent == null) {
            throw new RuntimeException(parent + "节点为null， 无法添加子节点");
        }
        if (parent.leftNode != null && isLeft) {
            throw new RuntimeException(parent + "节点已有左子节点，无法添加左子节点");
        }
        if (parent.rightNode != null && !isLeft) {
            throw new RuntimeException(parent + "节点已有右子节点，无法添加右子节点");
        }
        TreeNode<E> newNode = new TreeNode<E>(data);
        if (isLeft) {
            // 让父节点的left引用指向新节点
            parent.leftNode = newNode;
        } else {
            // 让父节点的right引用指向新节点
            parent.rightNode = newNode;
        }
        // 让新节点的parent引用到parent节点
        newNode.parentNode = parent;
        return newNode;
    }

    // 判断二叉树是否为空
    public boolean empty() {
        // 是否存在根节点判断二叉树是否为空
        return rootNode == null;
    }

    // 返回根节点
    public TreeNode<E> getRoot() {
        if (empty()) {
            throw new RuntimeException("树为空，无法访问根节点");
        }
        return rootNode;
    }

    // 返回指定节点的父节点
    public TreeNode<E> getParent(TreeNode<E> node) {
        if (node == null) {
            throw new RuntimeException("节点为null，无法访问其父节点");
        }
        if (node.parentNode == null) {
            throw new RuntimeException("根节点无父节点");
        }
        return node.parentNode;
    }

    // 返回指定节点（非叶子）的左子节点，当左子节点不存在时返回null
    public TreeNode<E> getLeftChild(TreeNode<E> parent) {
        if (parent == null) {
            throw new RuntimeException(parent + "节点为null，无法添加子节点");
        }
        return parent.leftNode == null ? null : parent.leftNode;
    }

    // 返回指定节点（非叶子）的右子节点，当右子节点不存在时返回null
    public TreeNode<E> getRightChild(TreeNode<E> parent) {
        if (parent == null) {
            throw new RuntimeException(parent + "节点为null，无法添加子节点");
        }
        return parent.rightNode == null ? null : parent.rightNode;
    }

    // 返回该二叉树的深度
    public int getDeep() {
        // 获取该树的深度
        return deep(rootNode);
    }

    // 这是一个递归方法：
    private int deep(TreeNode<E> node) {
        if (node == null) {//节点为空返回0
            return 0;
        }
        if (node.leftNode == null && node.rightNode == null) {//叶节点返回1
            return 1;
        } else {
            int leftDeep = deep(node.leftNode);
            int rightDeep = deep(node.rightNode);
            // 记录其所有左、右子树中较大的深度
            int max = leftDeep > rightDeep ? leftDeep : rightDeep;
            // 返回其左右子树中较大的深度 + 1
            return max + 1;
        }
    }

    public static void main(String[] args) {
        ThreeLinkBinTree1<String> tbt = new ThreeLinkBinTree1<String>("a");
        TreeNode<String> a = tbt.getRoot();
        System.out.println(a);
        TreeNode<String> b2 = tbt.addNode(a, "b2", false);
        TreeNode<String> c3 = tbt.addNode(b2, "c3", true);
        System.out.println(tbt.getParent(c3));
        System.out.println(tbt.getDeep());
    }
}
