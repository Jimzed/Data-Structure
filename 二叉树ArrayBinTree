import java.util.Arrays;

public class ArrayBinTree1<E> {
    // 使用数组来记录该树的所有节点
    private Object[] datas;
    // 默认深度为8
    private int DEFAULT_DEEP = 8;
    // 保存该树的深度
    private int deep;
    // 最大容纳结点个数
    private int arraySize;

    // 以默认的深度创建二叉树
    public ArrayBinTree1() {
        this.deep = DEFAULT_DEEP;
        this.arraySize = (int) (Math.pow(2, deep) - 1);
        datas = new Object[arraySize];
    }

    // 以指定深度创建二叉树
    public ArrayBinTree1(int deep) {
        this.deep = deep;
        this.arraySize = (int) (Math.pow(2, deep) - 1);
        datas = new Object[arraySize];
    }

    // 以指定深度、指定节点创建二叉树
    public ArrayBinTree1(int deep, E data) {
        this.deep = deep;
        this.arraySize = (int) (Math.pow(2, deep) - 1);
        datas = new Object[arraySize];
        datas[0] = data;
    }

    /**
     * 为指定节点添加子节点
     *
     * @param index 需要添加子节点的父节点的索引
     * @param data  新子节点的数据
     * @param left  是否为左节点,是左节点为true,右节点为false
     */
    public void add(int index, E data, boolean left) {
        // 判断需要添加子节点的父节点是否存在
        if (datas[index] == null) {
            throw new RuntimeException(index + "处节点为空，无法添加子节点");
        }
        // 判断父节点是否为最大层深度的节点，如果是则无法添加子节点
        if (2 * index + 1 >= arraySize) {
            throw new RuntimeException("树底层的数组已满，树越界异常");
        }
        // 添加左子节点
        if (left) {
            datas[2 * index + 1] = data;
        } else {
            datas[2 * index + 2] = data;
        }
    }

    // 判断二叉树是否为空
    public boolean empty() {
        // 根据根元素判断二叉树是否为空
        return datas[0] == null;
    }

    // 返回根节点
    public E getRoot() {
        return (E) datas[0];
    }

    // 返回指定节点（非根结点）的父节点
    public E getParent(int index) {
        return (E) datas[(index - 1) / 2];
    }

    // 返回指定节点（非叶子）的左子节点，当左子节点不存在时返回null
    public E getLeft(int index) {
        if (2 * index + 1 >= arraySize) {
            throw new RuntimeException("该节点为叶子节点，无子节点");
        }
        return (E) datas[2 * index + 1];
    }

    // 返回指定节点（非叶子）的右子节点，当右子节点不存在时返回null
    public E getRight(int index) {
        if (2 * index + 2 >= arraySize) {
            throw new RuntimeException("该节点为叶子节点，无子节点");
        }
        return (E) datas[2 * index + 2];
    }

    // 返回该二叉树的深度
    public int getDeep() {
        return deep;
    }

    // 返回指定节点的位置
    public int pos(E data) {
        // 该循环实际上就是按广度遍历来搜索每个节点
        for (int i = 0; i < arraySize; i++) {
            if (datas[i].equals(data)) {
                return i;
            }
        }
        return -1;
    }

    @Override
    public String toString() {
        return Arrays.toString(datas);
    }

    public static void main(String[] args) {
        ArrayBinTree<String> binTree = new ArrayBinTree<String>(4, "根节点");
        binTree.add(0, "第二层右子节点", false);
        binTree.add(2, "第三层右子节点", false);
        binTree.add(6, "第四层右子节点", false);
        System.out.println(binTree);
    }
}
