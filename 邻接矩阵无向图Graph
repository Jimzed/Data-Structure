package 数据结构.图Graph.邻接矩阵无向图;

import java.io.IOException;
import java.util.Scanner;

/**
 * 逻辑结构分为两部分：V和E集合。因此，用一个一维数组存放图中所有顶点数据；
 * 用一个二维数组存放顶点间关系（边或弧）的数据，这个二维数组称为邻接矩阵。
 */
public class MatrixUDG {
    private char[] vertexs; // 顶点集合
    private int[][] matrix; // 邻接矩阵

    public MatrixUDG() {
        // 输入"顶点数"和"边数"
        System.out.println("input vertex number: ");
        int vlen = readInt();
        System.out.println("input edge number: ");
        int elen = readInt();
        if (vlen < 1 || elen < 1 || (elen > (vlen * (vlen - 1)))) {
            System.out.println("input error: invalid parameters!\n");
            return;
        }
        // 初始化"顶点"
        vertexs = new char[vlen];
        for (int i = 0; i < vertexs.length; i++) {
            System.out.printf("vertex(%d): ", i);
            vertexs[i] = readChar();
        }
        // 初始化"边"
        matrix = new int[vlen][vlen];
        for (int i = 0; i < elen; i++) {
            // 读取边的起始顶点和结束顶点
            System.out.printf("edge(%d):", i);
            char c1 = readChar();
            char c2 = readChar();
            int p1 = getPosition(c1);
            int p2 = getPosition(c2);
            if (p1 == -1 || p2 == -1) {
                System.out.printf("input error: invalid edge!\n");
                return;
            }
            matrix[p1][p2] = 1;
            matrix[p2][p1] = 1;
        }
    }

    /**
     * 创建图(用已提供的矩阵)
     *
     * @param vertexs 顶点数组
     * @param edges   边数组
     */
    public MatrixUDG(char[] vertexs, char[][] edges) {
        // 得到"顶点数"和"边数"
        int vlen = vertexs.length;
        int elen = edges.length;
        // 初始化"顶点"
        this.vertexs = new char[vlen];
        for (int i = 0; i < this.vertexs.length; i++) {
            this.vertexs[i] = vertexs[i];
        }
        // 初始化"边"
        matrix = new int[vlen][vlen];
        for (int i = 0; i < elen; i++) {
            // 读取边的起始顶点和结束顶点
            int p1 = getPosition(edges[i][0]);
            int p2 = getPosition(edges[i][1]);
            matrix[p1][p2] = 1;
            matrix[p2][p1] = 1;
        }
    }

    /**
     * 打印矩阵队列图
     */
    public void printGraph() {
        System.out.printf("Martix Graph:\n");
        for (int i = 0; i < vertexs.length; i++) {
            for (int j = 0; j < vertexs.length; j++) {
                System.out.printf("%d  ", matrix[i][j]);
            }
            System.out.println();
        }
    }

    /**
     * 读取一个输入int
     */
    private int readInt() {
        Scanner scanner = new Scanner(System.in);
        return scanner.nextInt();
    }

    /**
     * 读取一个输入字符
     */
    private char readChar() {
        char ch = '0';
        do {
            try {
                ch = (char) System.in.read();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } while (!((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')));
        return ch;
    }

    /**
     * 返回字符在矩阵中的位置
     */
    private int getPosition(char ch) {
        for (int i = 0; i < vertexs.length; i++) {
            if (vertexs[i] == ch) {
                return i;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        char[] vertexs = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};
        char[][] edges = new char[][]{
                {'A', 'C'},
                {'A', 'D'},
                {'A', 'F'},
                {'B', 'C'},
                {'C', 'D'},
                {'E', 'G'},
                {'F', 'G'}
        };
        MatrixUDG matrixUDG = new MatrixUDG(vertexs, edges);
//        MatrixUDG matrixUDG=new MatrixUDG();
        matrixUDG.printGraph();
    }
}
