import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * 用数组来实现，每个数组装入一个节点，节点里有两个参数，第一个是节点的值
 * 第二个是其父节点在数组中的索引号
 */
public class TreeParent1<E> {
    public static class Node<E> {
        private E data;
        private int parent;

        public Node() {

        }

        public Node(E data) {
            this.data = data;
        }

        public Node(E data, int parent) {
            this.data = data;
            this.parent = parent;
        }

        @Override
        public String toString() {
            return "TreeParent$Node[data=" + data + ", parent=" + parent + "]";
        }
    }

    private final int DEFAULT_TREE_SIZE = 100;
    private int treeSize = 0;
    //使用一个Node[]数组来记录该树里面的所有节点
    private Node[] nodes;
    //记录树的节点数
    private int nodeNum;

    //给出节点数据，默认treeSize创树
    public TreeParent1(E data) {
        treeSize = DEFAULT_TREE_SIZE;
        nodes = new Node[treeSize];
        nodes[0] = new Node(data, -1);//根节点没有父节点为-子节点链表示法
        nodeNum++;
    }

    //给出节点数据和treeSize创树
    public TreeParent1(E data, int treeSize) {
        this.treeSize = treeSize;
        nodes = new Node[treeSize];
        nodes[0] = new Node(data, -1);
        nodeNum++;
    }

    //判断树是否为空
    public boolean empty() {
        //根节点是否为空
        return nodes[0] == null;
    }

    //返回指定节点的位置
    public int pos(Node<E> node) {
        for (int i = 0; i < treeSize; i++) {
            if (nodes[i] == node) {
                return i;
            }
        }
        return -1;
    }

    //为指定节点添加子节点
    public Node<E> addNode(E data, Node<E> parent) {
        for (int i = 0; i < treeSize; i++) {
            // 找到数组中第一个为null的元素，该元素保存新节点
            if (nodes[i] == null) {
                // 创建新节点，并用指定的数组元素保存它
                nodes[i] = new Node(data, pos(parent));
                nodeNum++;
                return nodes[i];
            }
        }
        throw new RuntimeException("该树已满，无法添加新节点");
    }

    //返回根节点
    public Node<E> getRoot() {
        return nodes[0];
    }

    //返回指定节点（非根结点）的父节点
    public Node<E> getParent(Node node) {
        return nodes[node.parent];
    }

    // 返回指定节点（非叶子节点）的所有子节点
    public List<Node<E>> getChild(Node parent) {
        List<Node<E>> list = new ArrayList<>();
        for (int i = 0; i < treeSize; i++) {
            // 如果当前节点的父节点的位置等于parent节点的位置
            if (nodes[i] != null && pos(parent) == nodes[i].parent) {
                list.add(nodes[i]);
            }
        }
        return list;
    }

    //返回该树的深度
    public int deep() {
        //用于记录节点的最大深度
        int max = 0;
        for (int i = 0; i < treeSize && nodes[i] != null; i++) {//遍历每一个节点的深度
            //初始化此节点深度
            int dp = 1;
            //m记录当前节点的父节点位置
            int m = nodes[i].parent;
            //如果父节点存在，且父节点不为根节点
            while (m != -1 && nodes[m] != null) {
                //向上继续搜索父节点
                m = nodes[m].parent;
                dp++;
            }
            if (max < dp) {
                max = dp;
            }
        }
        return max;
    }

    public static void main(String[] args) {
        TreeParent1<String> tp = new TreeParent1<String>("根节点");
        System.out.println(tp.getRoot());
        TreeParent1.Node a1 = tp.addNode("节点1", tp.getRoot());
        TreeParent1.Node a2 = tp.addNode("节点2", tp.getRoot());
        TreeParent1.Node a3 = tp.addNode("节点3", a1);
        TreeParent1.Node a4 = tp.addNode("节点4", a2);
        System.out.println(tp.deep());
        List<TreeParent1.Node<String>> list = tp.getChild(a1);
        Iterator<Node<String>> iterator = list.iterator();
        while (iterator.hasNext()) {
            System.out.println(iterator.next());
        }
    }
}
