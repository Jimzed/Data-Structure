package 数据结构.树Tree.构造哈夫曼树;

/**
 * 定义树的节点
 * 重写了对象比较器Comparable来比较节点的权大小，方便用 Collections.sort对节点进行权（从大到小）排序
 */
public class Node<E> implements Comparable<Node<E>> {
    private E data;// 节点数据
    private int weight;// 权重
    private Node<E> leftNode;// 左节点
    private Node<E> rightNode;// 右节点

    public Node(E data, int weight, Node<E> leftNode, Node<E> rightNode) {
        this.data = data;
        this.weight = weight;
        this.leftNode = leftNode;
        this.rightNode = rightNode;
    }

    @Override
    public String toString() {
        return "data:" + this.data + ",weight:" + this.weight + ";   ";
    }

    @Override
    public int compareTo(Node<E> o) {
        if (o.weight > this.weight) {
            return 1;
        } else if (o.weight < this.weight) {
            return -1;
        }
        return 0;
//        return o.weight-this.weight; 一个效果，后面一个减前面一个从大到小排序
    }

    public E getData() {
        return data;
    }

    public void setData(E data) {
        this.data = data;
    }

    public int getWeight() {
        return weight;
    }

    public void setWeight(int weight) {
        this.weight = weight;
    }

    public Node<E> getLeftNode() {
        return leftNode;
    }

    public void setLeftNode(Node<E> leftNode) {
        this.leftNode = leftNode;
    }

    public Node<E> getRightNode() {
        return rightNode;
    }

    public void setRightNode(Node<E> rightNode) {
        this.rightNode = rightNode;
    }
}

package 数据结构.树Tree.构造哈夫曼树;

import java.util.*;

public class HuffmanTree<E> {
    /**
     * 只要nodes不为空，将nodes排序，选出权最小的两个节点，构造新节点，nodes中去掉刚才相加权的节点，加入新节点，循环..
     *
     * @param nodes
     * @return root
     */
    public Node<E> createTree(List<Node<E>> nodes) {
        while (nodes.size() > 1) {
            Collections.sort(nodes);
            Node<E> leftNode = nodes.get(nodes.size() - 1);
            Node<E> rightNode = nodes.get(nodes.size() - 2);
            Node<E> parentNode = new Node<E>(null, leftNode.getWeight() + rightNode.getWeight(), leftNode, rightNode);
            nodes.remove(leftNode);
            nodes.remove(rightNode);
            nodes.add(parentNode);
        }
        return nodes.get(0);
    }

    /**
     * 层序遍历，通过队列按层遍历树，将结果依次存放入list
     *
     * @param root
     * @return list
     */
    public List<Node<E>> levelOrder(Node<E> root) {
        List<Node<E>> list = new ArrayList<Node<E>>();
        Queue<Node<E>> queue = new LinkedList<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            Node<E> pNode = queue.poll();
            list.add(pNode);
            if (pNode.getLeftNode() != null) {
                queue.add(pNode.getLeftNode());
            }
            if (pNode.getRightNode() != null) {
                queue.add(pNode.getRightNode());
            }
        }
        return list;
    }
}

package 数据结构.树Tree.构造哈夫曼树;

import java.util.ArrayList;
import java.util.List;

/**
 * 哈夫曼树结构
 *              18
 *             /  \
 *            7   11
 *               /  \
 *              5    6
 *                  / \
 *                 2   4
 * 运行结果
 * [data:null,weight:18;   , data:a,weight:7;   , data:null,weight:11;   , data:b,weight:5;   , data:null,weight:6;   , data:d,weight:2;   , data:c,weight:4;   ]
 */
public class HuffmanTreeTest {
    public static void main(String[] args) {
        List<Node<String>> nodes = new ArrayList<Node<String>>();
        nodes.add(new Node<String>("b", 5, null, null));
        nodes.add(new Node<String>("a", 7, null, null));
        nodes.add(new Node<String>("d", 2, null, null));
        nodes.add(new Node<String>("c", 4, null, null));
        HuffmanTree<String> tree = new HuffmanTree<String>();
        Node<String> root = tree.createTree(nodes);
        System.out.println(tree.levelOrder(root));
    }
}

