package 数据结构.图Graph.邻接表有向图;

import java.io.IOException;
import java.util.Scanner;

/**
 * 邻接表，存储方法跟树的孩子链表示法相类似，是一种顺序分配和链式分配相结合的存储结构。
 * 如这个表头结点所对应的顶点存在相邻顶点，则把相邻顶点依次存放于表头结点所指向的单向链表中。
 *
 * 对于无向图来说，使用邻接表进行存储也会出现数据冗余，表头结点A所指链表中存在一个指向C的
 * 表结点的同时，表头结点C所指链表也会存在一个指向A的表结点
 */
public class ListDG {
    // 邻接表中表对应的链表的顶点,这是链式存储结构
    private class ENode{
        int ivex;       // 该边所指向的顶点的位置
        ENode nextEdge; // 指向下一条弧的指针
    }
    // 邻接表中表的顶点，这是顺序存储结构
    private class VNode{
        char data;      // 顶点信息
        ENode firstEdge;// 指向第一条依附该顶点的弧
    }
    private VNode[] mVexs;// 顶点数组

    /**
     *  创建图(自己输入数据)
     */
    public ListDG(){
        //  输入"顶点数"和"边数"
        System.out.println("input vertex number: ");
        int vlen=readInt();
        System.out.println("input edge number: ");
        int elen=readInt();
        if ( vlen < 1 || elen < 1 || (elen > (vlen*(vlen - 1)))) {
            System.out.printf("input error: invalid parameters!\n");
            return ;
        }
        // 初始化"顶点"
        mVexs=new VNode[vlen];
        for(int i=0;i<mVexs.length;i++){
            System.out.printf("vertex(%d): ", i);
            mVexs[i]=new VNode();
            mVexs[i].data=readChar();
            mVexs[i].firstEdge=null;
        }
        // 初始化"边"
        for(int i=0;i<elen;i++){
            // 读取边的起始顶点和结束顶点
            System.out.printf("edge(%d):", i);
            char c1=readChar();
            char c2=readChar();
            int p1=getPosition(c1);
            int p2=getPosition(c2);
            // 初始化node1
            ENode node1=new ENode();
            node1.ivex=p2;
            // 将node1链接到"p1所在链表的末尾"
            if(mVexs[p1].firstEdge==null){
                mVexs[p1].firstEdge=node1;
            }else{
                addNode(mVexs[p1].firstEdge,node1);
            }
        }
    }

    /**
     * 创建图(用已提供的矩阵)
     *
     * @param vexs  顶点数组
     * @param edges 边数组
     */
    public ListDG(char[] vexs,char[][] edges){
        // 初始化"顶点数"和"边数"
        int vlen = vexs.length;
        int elen = edges.length;
        // 初始化"顶点"
        mVexs = new VNode[vlen];
        for (int i = 0; i < mVexs.length; i++) {
            mVexs[i] = new VNode();
            mVexs[i].data = vexs[i];
            mVexs[i].firstEdge = null;
        }
        // 初始化"边"
        for (int i = 0; i < elen; i++) {
            // 读取边的起始顶点和结束顶点
            int p1 = getPosition(edges[i][0]);
            int p2 = getPosition(edges[i][1]);
            // 初始化node1
            ENode node1 = new ENode();
            node1.ivex = p2;
            // 将node1连接到"p1所在链表的末尾"
            if (mVexs[p1].firstEdge == null) {
                mVexs[p1].firstEdge = node1;
            } else {
                addNode(mVexs[p1].firstEdge, node1);
            }
        }
    }

    /**
     * 读取一个输入字符
     */
    private int readInt() {
        Scanner scanner = new Scanner(System.in);
        return scanner.nextInt();
    }

    /**
     * 读取一个输入字符
     */
    private char readChar() {
        char ch = '0';
        do {
            try {
                ch = (char) System.in.read();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } while (!((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')));
        return ch;
    }

    /**
     * 返回ch位置
     */
    private int getPosition(char ch) {
        for (int i = 0; i < mVexs.length; i++) {
            if (mVexs[i].data == ch) {
                return i;
            }
        }
        return -1;
    }

    /**
     * 将node节点连接到list的最后
     */
    private void addNode(ENode firstNode, ENode newNode) {
        ENode currentNode = firstNode;
        while (currentNode.nextEdge != null) {
            currentNode = currentNode.nextEdge;
        }
        currentNode.nextEdge = newNode;
    }

    /**
     * 打印矩阵队列图
     */
    public void printGraph() {
        System.out.printf("List Graph:\n");
        for (int i = 0; i < mVexs.length; i++) {
            System.out.printf("%d(%c): ", i, mVexs[i].data);
            ENode node = mVexs[i].firstEdge;
            while (node != null) {
                System.out.printf("%d(%c) ", node.ivex, mVexs[node.ivex].data);
                node = node.nextEdge;
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        char[] vexs = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};
        char[][] edges = new char[][]{
                {'A', 'B'},
                {'B', 'C'},
                {'B', 'E'},
                {'B', 'F'},
                {'C', 'E'},
                {'D', 'C'},
                {'E', 'B'},
                {'E', 'D'},
                {'F', 'G'}
        };
        ListDG listDG = new ListDG(vexs, edges);
        listDG.printGraph();
    }
}
